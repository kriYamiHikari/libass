name: Build and Release libass

on:
  # 允许手动从 GitHub Actions 页面触发此工作流
  workflow_dispatch:
  # 当向 master 或 main 分支推送时也自动触发
  push:
    branches: [ master, main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 配置：使用 MSYS2/MinGW64 环境
          - name: Windows
            os: windows-latest
            shell: msys2 {0}
          # Ubuntu 配置
          - name: Ubuntu
            os: ubuntu-latest
            shell: bash
          # macOS 配置
          - name: macOS
            os: macos-latest
            shell: bash

    runs-on: ${{ matrix.os }}

    # 设置默认的 shell，根据矩阵变化
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. 为 Windows 安装 MSYS2 和所有 MinGW 依赖
      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fribidi

      # 2. 为 macOS 和 Linux 安装依赖
      - name: Install macOS/Linux Dependencies
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            brew install meson ninja nasm pkg-config freetype fontconfig harfbuzz fribidi
          elif [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y ninja-build meson nasm build-essential pkg-config \
              libfreetype-dev libfontconfig-dev libharfbuzz-dev libfribidi-dev
          fi

      # 3. 配置项目 (Meson Setup)
      - name: Configure build
        run: |
          meson setup build --prefix="${{ github.workspace }}/install_dir" -Ddefault_library=shared -Dtest=disabled

      # 4. 编译项目 (Meson Compile)
      - name: Compile project
        run: meson compile -C build

      # 5. 安装项目 (Meson Install)
      - name: Install project
        run: meson install -C build

      # 6. 上传编译产物 (Upload Artifact)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libass-build-${{ matrix.name }}
          path: ${{ github.workspace }}/install_dir/
